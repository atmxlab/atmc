// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atmxlab/atmc/processor (interfaces: Analyzer)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/Analyzer_mock.go -package=mocks . Analyzer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	ast "github.com/atmxlab/atmc/parser/ast"
	gomock "go.uber.org/mock/gomock"
)

// MockAnalyzer is a mock of Analyzer interface.
type MockAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyzerMockRecorder
}

// MockAnalyzerMockRecorder is the mock recorder for MockAnalyzer.
type MockAnalyzerMockRecorder struct {
	mock *MockAnalyzer
}

// NewMockAnalyzer creates a new mock instance.
func NewMockAnalyzer(ctrl *gomock.Controller) *MockAnalyzer {
	mock := &MockAnalyzer{ctrl: ctrl}
	mock.recorder = &MockAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyzer) EXPECT() *MockAnalyzerMockRecorder {
	return m.recorder
}

// Analyze mocks base method.
func (m *MockAnalyzer) Analyze(arg0 ast.Ast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Analyze", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Analyze indicates an expected call of Analyze.
func (mr *MockAnalyzerMockRecorder) Analyze(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Analyze", reflect.TypeOf((*MockAnalyzer)(nil).Analyze), arg0)
}
