// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atmxlab/atmc/processor (interfaces: Lexer)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/Lexer_mock.go -package=mocks . Lexer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	token "github.com/atmxlab/atmc/types/token"
	gomock "go.uber.org/mock/gomock"
)

// MockLexer is a mock of Lexer interface.
type MockLexer struct {
	ctrl     *gomock.Controller
	recorder *MockLexerMockRecorder
}

// MockLexerMockRecorder is the mock recorder for MockLexer.
type MockLexerMockRecorder struct {
	mock *MockLexer
}

// NewMockLexer creates a new mock instance.
func NewMockLexer(ctrl *gomock.Controller) *MockLexer {
	mock := &MockLexer{ctrl: ctrl}
	mock.recorder = &MockLexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLexer) EXPECT() *MockLexerMockRecorder {
	return m.recorder
}

// Tokenize mocks base method.
func (m *MockLexer) Tokenize(arg0 string) ([]token.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tokenize", arg0)
	ret0, _ := ret[0].([]token.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tokenize indicates an expected call of Tokenize.
func (mr *MockLexerMockRecorder) Tokenize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tokenize", reflect.TypeOf((*MockLexer)(nil).Tokenize), arg0)
}
