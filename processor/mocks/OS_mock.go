// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atmxlab/atmc/processor (interfaces: OS)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/OS_mock.go -package=mocks . OS
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOS is a mock of OS interface.
type MockOS struct {
	ctrl     *gomock.Controller
	recorder *MockOSMockRecorder
}

// MockOSMockRecorder is the mock recorder for MockOS.
type MockOSMockRecorder struct {
	mock *MockOS
}

// NewMockOS creates a new mock instance.
func NewMockOS(ctrl *gomock.Controller) *MockOS {
	mock := &MockOS{ctrl: ctrl}
	mock.recorder = &MockOSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOS) EXPECT() *MockOSMockRecorder {
	return m.recorder
}

// AbsPath mocks base method.
func (m *MockOS) AbsPath(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbsPath", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbsPath indicates an expected call of AbsPath.
func (mr *MockOSMockRecorder) AbsPath(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbsPath", reflect.TypeOf((*MockOS)(nil).AbsPath), arg0, arg1)
}

// EnvVariables mocks base method.
func (m *MockOS) EnvVariables() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvVariables")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// EnvVariables indicates an expected call of EnvVariables.
func (mr *MockOSMockRecorder) EnvVariables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvVariables", reflect.TypeOf((*MockOS)(nil).EnvVariables))
}

// ReadFile mocks base method.
func (m *MockOS) ReadFile(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockOSMockRecorder) ReadFile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockOS)(nil).ReadFile), arg0)
}
